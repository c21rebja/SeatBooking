<!-- ********************************************************
                           C# Code
********************************************************* -->

@page "/home"
@using SeatBookingAPI.Models
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Diagnostics
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer

@code {
    private HttpClient client = new HttpClient();
    private DotNetObjectReference<Home>? dotNetObjectReference;

    private User currentUser = new User();
    private Office currentOffice = new Office();
    private Seat selectedSeat = new Seat();
    private IEnumerable<Seat> seats = Array.Empty<Seat>();
    private IEnumerable<Office> offices = Array.Empty<Office>();

    private Stopwatch sw = new Stopwatch();

    private bool seatModalOpen = false;
    private bool loading = true;
    private string layoutContent = "";
    private long displayedOfficeId = 0;

    protected override void OnInitialized()
    {
        client = ClientFactory.CreateClient("API");
        sw.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Set the DotNetReferenceObject, to be able to call C# functions from JS
        if (firstRender)
        {
            dotNetObjectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setDotNetReference", dotNetObjectReference);
            await GetUser();
        }
    }

    private async Task GetUser ()
    {
        var data = await ProtectedSessionStore.GetAsync<User>("userData");
        if(data.Value != null) {
            if (data.Value.UserId != 0) {
                currentUser = data.Value;
                displayedOfficeId = currentUser.OfficeId;
                await GetOffice(currentUser.OfficeId);
                await GetOffices();
                return;
            }
        }
        navigationManager.NavigateTo("/");
    }

    private async Task GetOffice(long officeId)
    {
        HttpResponseMessage response = client.GetAsync("api/offices/" + officeId).Result;
        if(response.IsSuccessStatusCode) {
            currentOffice = await response.Content.ReadFromJsonAsync<Office>() ?? new Office();
            if (currentOffice.OfficeId != 0)
            {
                if (currentOffice.Seats != null) seats = currentOffice.Seats;
                await SetupLayout();
            }
        }
    }

    private async Task GetOffices()
    {
        offices = await client.GetFromJsonAsync<IEnumerable<Office>>("/api/offices") ?? Enumerable.Empty<Office>(); ;
        StateHasChanged();
    }

    private async Task ChangeOffice(ChangeEventArgs e)
    {
        await GetOffice(Convert.ToInt64(e.Value));
    }

    // Adds necessary onclick functions and classes to the seats
    private async Task SetupLayout ()
    {
        if(currentOffice.Layout != null)
        {
            layoutContent = currentOffice.Layout!;
            string allSeats = "";
            foreach (Seat seat in seats)
            {
                if (seat.Layout != null) {
                    string seatContent = seat.Layout;
                    if (seatContent != null)
                    {
                        seatContent = seatContent.Replace("#", "onclick='chooseSeat(" + seat.SeatId + ");' b-oxkldxxbnv tabindex='0'"); // The last line is to get the CSS to recognize the classes
                        if (seat.State == 0) seatContent = seatContent.Replace("seat", "seat available");
                        else if (seat.State == 1 && seat.UserId == currentUser.UserId) seatContent = seatContent.Replace("seat", "seat booked-by-user");
                        else seatContent = seatContent.Replace("seat", "seat booked");
                    }
                    allSeats += seatContent;
                }
            }
            layoutContent = layoutContent.Replace("#", allSeats);
            loading = false;

            // Save the time it took to load the page, to mkae measurements
            sw.Stop();
            await SaveLoadTime(sw.Elapsed.TotalNanoseconds);

            StateHasChanged();
        }
    }

    // Called from JS
    // Opens modal with the correct seat information
    [JSInvokable("ChooseSeat")]
    public void ChooseSeat(long seatId)
    {
        var seat = seats.FirstOrDefault(s => s.SeatId == seatId);
        if(seat != null)
        {
            selectedSeat = seat;
            seatModalOpen = true;
            StateHasChanged();
        }
    }

    // Updates the seat in the DB, if it has been booked or cancelled
    private async Task BookSeat(bool isBooking)
    {
        loading = true;

        int state = 0; // Unbooking seat
        long userId = 0;
        if (isBooking) { // Booking seat
            state = 1; 
            userId = currentUser.UserId;
        }

        SeatDTO seatDTO = new() {
            UserId = userId,
            State = state,
        };
        await client.PutAsJsonAsync("/api/seats/" + selectedSeat.SeatId, seatDTO);

        seatModalOpen = false;
        await GetOffice(currentUser.OfficeId); // TODO: This can be done better?
        selectedSeat = new Seat();
        await SetupLayout();

        loading = false;
    }

    public bool isDisabled()
    {
        if (selectedSeat.State == 0) return false;
        else return true;
    }

    public bool isSelected(long officeId)
    {
        if (officeId == currentOffice.OfficeId) return true;
        else return false;
    }

    public void Dispose()
    {
        dotNetObjectReference?.Dispose();
    }

    // Code for measurement of load time
    private async Task SaveLoadTime(double elapsedTime)
    {
        double elapsedInMs = elapsedTime / 1000000;
        Console.WriteLine(elapsedInMs);
        await JS.InvokeVoidAsync("saveToLocalStorage", elapsedInMs);
    }
}

<!-- ********************************************************
                        JS <script>
********************************************************* -->
<!-- Unfortunately this is necessary, since Blazor isn't able to edit the DOM -->
<script>
    /* Holds the reference to the c#, to be able to instantiate non-static methods.
     * Might have issues with garbage collection.
     * I have not seen any signs that the size of the application keeps increasing, but it's worth keeping in mind.
    */
    var dotNetObjectReference;
    function setDotNetReference(dotNetRef) {
        dotNetObjectReference = dotNetRef;
    }

    // Call .NET function to handle the information once klicking the seat
    function chooseSeat(seatId) {
        console.log("clicked seat");
        dotNetObjectReference.invokeMethodAsync('ChooseSeat', seatId);
    }

    /* Takes care of panning and zooming the office layout. */
    var scale = 1.0;
    var drag = {
        x: 0,
        y: 0,
        state: false
    };
    var delta = {
        x: 0,
        y: 0
    };

    // Sets start-values for drag
    function startDrag(e) {
        if(!drag.state) {
            if (e.target.classList.contains('seat')) return;
            drag.x = e.clientX;
            drag.y = e.clientY;
            drag.state = true;
        }
    }

    // Moves the move-object, if the object has been zoomed
    function dragging(e) {
        if (scale == 1) {
            if (e.target.classList.contains('seat')) return;
            e.target.style.left = '0px';
            e.target.style.top = '0px';
        } else {
            if (drag.state) {
                delta.x = e.pageX - drag.x;
                delta.y = e.pageY - drag.y;

                var curOffsetLeft = e.target.offsetLeft;
                var curOffsetTop = e.target.offsetTop;

                e.target.style.left = (curOffsetLeft + delta.x) + 'px';
                e.target.style.top = (curOffsetTop + delta.y) + 'px';

                drag.x = e.pageX;
                drag.y = e.pageY;
            }
        }
    }

    // Ends drag if mouse key is released. Set on entire window since cursor is sometimes dragging outside of element
    window.addEventListener('mouseup', function () {
        if (drag.state) drag.state = false;
    })

    // Zooms the element up to x4
    function zoom(event) {
        if (event.target.classList.contains('seat')) return;
        event.preventDefault();
        scale += event.deltaY * -0.01;
        scale = Math.min(Math.max(1, scale), 4);
        event.target.style.transform = 'scale(' + scale + ')';
    }

    // Resets draggable element
    function reset() {
        scale = 1;
        elem = document.getElementById('move-object');
        elem.style.transform = 'scale(' + scale + ')';
        elem.style.left = '0px';
        elem.style.top = '0px';
    }

    // Simulates movement of the element, when pressing a button
    function simulateMove() {
        var moveObject = document.getElementById("move-object");
        wheelEvent(moveObject); // Zoom in first to be able to move
        setTimeout(() => {
            var start = performance.timeOrigin + performance.now();

            // Move the object
            mouseDownEvent(moveObject);
            moveEvent(moveObject);
            simulateEvent(moveObject, "mouseup");

            setTimeout(() => {
                var end = performance.timeOrigin + performance.now();
                var elapsedTime = end - start;

                saveToLocalStorage(elapsedTime);
                console.log(elapsedTime);
            }, 100);
        }, 200);
        
    }

    // Simulates zoom of the element, when pressing a button
    function simulateZoom() {
        var moveObject = document.getElementById("move-object");

        var start = performance.timeOrigin + performance.now();

        wheelEvent(moveObject);

        // Zoom in on the object
        setTimeout(() => {
            var end = performance.timeOrigin + performance.now();
            var elapsedTime = end - start;

            saveToLocalStorage(elapsedTime);
            console.log(elapsedTime);
        }, 100);
    }

    function saveToLocalStorage(data) {
        console.log("saved");
        var a = [];
        // Parse the serialized data back into an aray of objects
        a = JSON.parse(localStorage.getItem('dataArray')) || [];
        a.push(data);
        // Re-serialize the array back into a string and store it in localStorage
        localStorage.setItem('dataArray', JSON.stringify(a));
    }

    function simulateEvent(node, eventType) {
        var event = new Event(eventType, { bubbles: true, cancelable: true });
        node.dispatchEvent(event);
    }

    function wheelEvent(node) {
        var ev = new MouseEvent("wheel", {
            bubbles: true,
            cancelable: true,
        })
        ev.deltaY = -200;
        node.dispatchEvent(ev);
    }

    function mouseDownEvent(node) {
        let moveev = new MouseEvent("mousedown", { bubbles: true , cancelable: true });
        node.dispatchEvent(moveev);
    }

    function moveEvent(node) { 
        let moveev = new MouseEvent("mousemove", {
            // Controls the position the element should move to
            clientX: 500,
            clientY: 500,
            bubbles: true
        });
        node.dispatchEvent(moveev);
    }
</script>

<!-- ********************************************************
                        HTML/Razor
********************************************************* -->

<PageTitle>Home</PageTitle>

<div class="container">
    <div class="inner-container">
        @if (@loading) {
            <LoadingSymbol></LoadingSymbol>
        } else {
            <p class="welcome-msg">Welcome @currentUser.Name</p>
            @if (offices.Count() != 0)
            {
                <div>
                    <span>Select your office: </span>
                    <select value="@displayedOfficeId" @onchange="ChangeOffice">
                        <optgroup label="Offices">
                            @foreach (Office office in offices)
                            {
                                <option value="@office.OfficeId">@office.Name</option>
                            }
                        </optgroup>
                    </select>
                </div>
            }
            @if (layoutContent != "")
            {
                <div class="layout-parent">
                    <div id="move-object" onmousedown="startDrag(event)" onmousemove="dragging(event)" onwheel="zoom(event)">
                        @((MarkupString)layoutContent)
                    </div>
                 </div>
                <button id="reset-button" class="btn" onclick="reset()">Reset</button>
                <button id="move-button" class="btn" onclick="simulateMove()">Move</button>
                <button id="zoom-button" class="btn" onclick="simulateZoom()">Zoom</button>
            }
            @if (@seatModalOpen)
            {
                <section class="modal">
                    <div>
                        <h2 class="container-heading">Seat Options</h2>
                        <div class="modal-content">
                            <p>
                                Current status:
                                @if (selectedSeat.State == 0)
                                {
                                    <span>Avaliable</span>
                                }
                                else
                                {
                                    <span>Booked</span>
                                }
                            </p>
                            @if (selectedSeat.UserId == currentUser.UserId)
                            {
                                <button @onclick="() => BookSeat(false)" class="btn">Deselect Seat</button>
                            }
                            else
                            {
                                <button @onclick="() => BookSeat(true)" disabled=@isDisabled() class="btn">Select Seat</button>
                            }

                            <button @onclick="() => seatModalOpen = false" class="btn">Close</button>
                        </div>
                    </div>
                </section>
            }
        }
    </div>
</div>

