<!-- ********************************************************
                           C# Code
********************************************************* -->

@page "/"
@using SeatBookingAPI.Models
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer

@code {
    private HttpClient client = new HttpClient();
    private DotNetObjectReference<Home>? dotNetObjectReference;

    private User? currentUser = new User();
    private Office currentOffice = new Office();
    private Seat selectedSeat = new Seat();
    private IEnumerable<Seat> seats = Array.Empty<Seat>();

    private bool isLoggedIn = true;
    private bool seatModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        if (!isLoggedIn) navigationManager.NavigateTo("/login");
        client = ClientFactory.CreateClient("API");
        await GetUser();
    }

    private async Task GetUser ()
    {
        currentUser = await client.GetFromJsonAsync<User>("api/users/2"); // TEMP hardcoded id
        if(currentUser != null)
        {
            await GetOffice(currentUser.OfficeId);
            await GetSeats(currentUser.OfficeId);
        } 
    }

    private async Task GetOffice(long officeId)
    {
        var office = await client.GetFromJsonAsync<Office>("/api/offices/" + officeId);
        if (office != null) currentOffice = office;
    }

    private async Task GetSeats(long officeId)
    {
        seats = await client.GetFromJsonAsync<IEnumerable<Seat>>("/api/seats/office/" + officeId) ?? Enumerable.Empty<Seat>(); ;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Set the DotNetReferenceObject, to be able to call C# functions from JS
        if(firstRender) {
            dotNetObjectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setDotNetReference", dotNetObjectReference);
        }

        // Manipulate the DOM for the seats
        int index = 0;
        foreach(Seat seat in seats) {
            await JS.InvokeVoidAsync("seatManager", seat.SeatId, index);
            await JS.InvokeVoidAsync("changeStatus", seat.SeatId, seat.State);
            index++;
        }
    }

    // Called from JS
    // Opens modal with the correct seat information
    [JSInvokable("ChooseSeat")]
    public void ChooseSeat(long seatId)
    {
        var seat = seats.FirstOrDefault(s => s.SeatId == seatId);
        if(seat != null)
        {
            selectedSeat = seat;
            seatModalOpen = true;
            StateHasChanged();
        }
    }

    // Updates the seat in the DB, if it has been booked or cancelled
    private async Task UpdateSeat()
    {
        selectedSeat.State = 1; // Just for testing
        Console.WriteLine("Booked seat!");
        await JS.InvokeVoidAsync("changeStatus", selectedSeat.SeatId, selectedSeat.State);
    }

    public bool isDisabled()
    {
        if (selectedSeat.State == 0) return false;
        else return true;
    }

    public void Dispose()
    {
        dotNetObjectReference?.Dispose();
    }
}

<!-- ********************************************************
                        JS Script
********************************************************* -->


<!-- Unfortunately this is necessary, since Blazor isn't able to edit the DOM -->
<script>
    /* Holds the reference to the c#, to be able to instantiate non-static methods.
     * Might have issues with garbage collection. 
     * I have not seen any signs that the size of the application keeps increasing, but it's worth keeping in mind.
    */
    var dotNetObjectReference; 
    function setDotNetReference(dotNetRef) {
        dotNetObjectReference = dotNetRef;
    }

    // Add onclick-functions to all the seats in the layout
    function seatManager(seatId, index) {
        const seats = document.getElementsByClassName("seat");
        seats[index].innerHTML = seatId;
        seats[index].setAttribute("onclick", "chooseSeat(" + seatId + ");");
        seats[index].setAttribute("id", seatId);
    }

    // Call .NET function to handle the information once klicking the seat
    function chooseSeat(seatId) {
        dotNetObjectReference.invokeMethodAsync('ChooseSeat', seatId);
    }

    function changeStatus(seatId, status) {
        var seat = document.getElementById(seatId);
        switch (status) {
            case 1:
                seat.style.fill = "red";
                break;
            default: // case 0
                seat.style.fill = "green";
        }
    }
</script>

<!-- ********************************************************
                        HTML/Razor
********************************************************* -->

<PageTitle>Home</PageTitle>

@if(currentOffice.Layout != null)
{
    @((MarkupString)currentOffice.Layout)
}

@if(@seatModalOpen) {
    <section class="modal">
        <h2>Seat Options</h2>
        <p>Current status: 
            @if(selectedSeat.State == 0) {
                <span>Avaliable</span>
            } else {
                <span>Booked</span>
            }
        </p>
        <button @onclick=@UpdateSeat disabled=@isDisabled()>Choose Seat</button>
        <button @onclick="() => seatModalOpen = false">Close</button>
    </section>
}

