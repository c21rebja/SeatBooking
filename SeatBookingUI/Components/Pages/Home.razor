<!-- ********************************************************
                           C# Code
********************************************************* -->

@page "/home"
@using SeatBookingAPI.Models
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer

@code {
    private HttpClient client = new HttpClient();
    private DotNetObjectReference<Home>? dotNetObjectReference;

    private User currentUser = new User();
    private Office currentOffice = new Office();
    private Seat selectedSeat = new Seat();
    private IEnumerable<Seat> seats = Array.Empty<Seat>();
    private IEnumerable<Office> offices = Array.Empty<Office>();

    private bool seatModalOpen = false;
    private bool loading = true;
    private string LayoutContent = "";

    protected override void OnInitialized()
    {
        client = ClientFactory.CreateClient("API");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Set the DotNetReferenceObject, to be able to call C# functions from JS
        if (firstRender)
        {
            dotNetObjectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setDotNetReference", dotNetObjectReference);
            await GetUser();
        }
    }

    private async Task GetUser ()
    {
        var data = await ProtectedSessionStore.GetAsync<User>("userData");
        if(data.Value != null) {
            if (data.Value.UserId != 0) {
                currentUser = data.Value; 
                await GetOffice(currentUser.OfficeId);
                await GetOffices();
                return;
            }
        }
        navigationManager.NavigateTo("/");
    }

    private async Task GetOffice(long officeId)
    {
        currentOffice = await client.GetFromJsonAsync<Office>("/api/offices/" + officeId) ?? new Office(); ;
        if (currentOffice.OfficeId != 0) {
            if(currentOffice.Seats != null) seats = currentOffice.Seats;
            SetupLayout();
        }
    }

    private async Task GetOffices()
    {
        offices = await client.GetFromJsonAsync<IEnumerable<Office>>("/api/offices") ?? Enumerable.Empty<Office>(); ;
        StateHasChanged();
    }

    private async Task ChangeOffice(ChangeEventArgs e)
    {
        await GetOffice(Convert.ToInt64(e.Value));
    }

    // Adds necessary onclick functions and classes to the seats
    private void SetupLayout ()
    {
        if(currentOffice.Layout != null)
        {
            LayoutContent = currentOffice.Layout!;
            string allSeats = "";
            foreach (Seat seat in seats)
            {
                if (seat.Layout != null) {
                    string seatContent = seat.Layout;
                    if (seatContent != null)
                    {
                        seatContent = seatContent.Replace("#", "onclick='chooseSeat(" + seat.SeatId + ");' b-oxkldxxbnv tabindex='0'"); // The last line is to get the CSS to recognize the classes
                        if (seat.State == 0) seatContent = seatContent.Replace("seat", "seat available");
                        else if (seat.State == 1 && seat.UserId == currentUser.UserId) seatContent = seatContent.Replace("seat", "seat booked-by-user");
                        else seatContent = seatContent.Replace("seat", "seat booked");
                    }
                    allSeats += seatContent;
                }
            }
            LayoutContent = LayoutContent.Replace("#", allSeats);
            loading = false;
            StateHasChanged();
        }
    }

    // Called from JS
    // Opens modal with the correct seat information
    [JSInvokable("ChooseSeat")]
    public void ChooseSeat(long seatId)
    {
        var seat = seats.FirstOrDefault(s => s.SeatId == seatId);
        if(seat != null)
        {
            selectedSeat = seat;
            seatModalOpen = true;
            StateHasChanged();
        }
    }

    // Updates the seat in the DB, if it has been booked or cancelled
    private async Task BookSeat(bool isBooking)
    {
        loading = true;

        int state = 0; // Unbooking seat
        long userId = 0;
        if (isBooking) { // Booking seat
            state = 1; 
            userId = currentUser.UserId;
        }

        SeatDTO seatDTO = new() {
            UserId = userId,
            State = state,
        };
        await client.PutAsJsonAsync("/api/seats/" + selectedSeat.SeatId, seatDTO);

        seatModalOpen = false;
        await GetOffice(currentUser.OfficeId); // TODO: This can be done better
        selectedSeat = new Seat();
        SetupLayout();

        loading = false;
    }

    public bool isDisabled()
    {
        if (selectedSeat.State == 0) return false;
        else return true;
    }

    public bool isSelected(long officeId)
    {
        if (officeId == currentOffice.OfficeId) return true;
        else return false;
    }

    public void Dispose()
    {
        dotNetObjectReference?.Dispose();
    }
}

<!-- ********************************************************
                        JS Script
********************************************************* -->


<!-- Unfortunately this is necessary, since Blazor isn't able to edit the DOM -->
<script>
    /* Holds the reference to the c#, to be able to instantiate non-static methods.
     * Might have issues with garbage collection. 
     * I have not seen any signs that the size of the application keeps increasing, but it's worth keeping in mind.
    */
    var dotNetObjectReference; 
    function setDotNetReference(dotNetRef) {
        dotNetObjectReference = dotNetRef;
    }

    // Call .NET function to handle the information once klicking the seat
    function chooseSeat(seatId) {
        console.log("clicked seat");
        dotNetObjectReference.invokeMethodAsync('ChooseSeat', seatId);
    }
</script>

<!-- ********************************************************
                        HTML/Razor
********************************************************* -->

<PageTitle>Home</PageTitle>

<div class="container">
    @if (@loading) {
        <LoadingSymbol></LoadingSymbol>
    } else {
        <p>Welcome @currentUser.Name</p>
        @if (offices.Count() != 0)
        {
            <div>
                <select @onchange="ChangeOffice">
                    <optgroup label="Offices">
                        @foreach (Office office in offices)
                        {
                            <option value="@office.OfficeId" selected="() => isSelected(office.OfficeId)">@office.Name</option>
                        }
                    </optgroup>
                </select>
            </div>
        }
        @if (LayoutContent != "")
        {
            <div class="layout-content">@((MarkupString)LayoutContent)</div>
        }
        @if (@seatModalOpen)
        {
            <section class="modal">
                <div>
                    <h2 class="container-heading">Seat Options</h2>
                    <div class="modal-content">
                        <p>
                            Current status:
                            @if (selectedSeat.State == 0)
                            {
                                <span>Avaliable</span>
                            }
                            else
                            {
                                <span>Booked</span>
                            }
                        </p>
                        @if (selectedSeat.UserId == currentUser.UserId)
                        {
                            <button @onclick="() => BookSeat(false)" class="btn">Deselect Seat</button>
                        }
                        else
                        {
                            <button @onclick="() => BookSeat(true)" disabled=@isDisabled() class="btn">Select Seat</button>
                        }

                        <button @onclick="() => seatModalOpen = false" class="btn">Close</button>
                    </div>
                </div>
            </section>

        }
    }
</div>

