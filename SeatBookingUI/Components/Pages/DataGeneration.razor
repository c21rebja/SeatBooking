@page "/data"
@using SeatBookingAPI.Models
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

@code {
    /* Generate two layouts per press, one SVG and one box 
         * Hopefully won't need that many layouts if the range is great enough
         * Think small (20, size 50), medium (60, size 50), large (150, size 40), xlarge (500, size 20)
         * These values have to be discussed I guess. I don't know if I should go to like 1000 or something....
        */

    HttpClient client = new HttpClient();
    private bool loading = false;

    private int elementNumber = 1000; // The number of seats that will be added to the layout
    private string size = "XXLarge"; // Should correspond to the amount of seats added
    private int elementSize = 13; // The height and width of a seat

    private int layoutWidth = 700; // The width of the parent (officelayout)
    private int layoutHeight = 500; // The height of the parent (officelayout)

    // Office layouts (can be the same for each office)
    private string boxOfficeLayout = "<div style='pointer-events: none; position: relative;'>#</div>";
    private string SVGOfficeLayout = "<svg style='pointer-events: none; overflow: visible'>#</svg>";

    protected override async Task OnInitializedAsync()
    {
        client = ClientFactory.CreateClient("API");
    }

    // Function called by the button, starts the generation
    private async Task StartGeneration() {
        loading = true;
        await Generation(0);
        await Generation(1);
    }

    // Generate the office and the specified number of seats
    private async Task Generation(int type)
    {
        string name, layout = "";
        if(type == 0) {
            name = "Box " + size;
            layout = boxOfficeLayout;
        } else {
            name = "SVG " + size;
            layout = SVGOfficeLayout;
        }

        OfficeDTO office = new()
        {
            Name = name,
            Layout = layout
        };

        HttpResponseMessage response = client.PostAsJsonAsync("/api/offices", office).Result;
        if (response.IsSuccessStatusCode)
        {
            Office newOffice = await response.Content.ReadFromJsonAsync<Office>() ?? new Office();
            if (newOffice.OfficeId == 0)
            {
                Console.WriteLine("Office wasn't created");
                return;
            }

            Console.WriteLine("Office created " + type);

            int xpos = 0;
            int ypos = 0;
            for(int i = 0; i < elementNumber; i++)
            {
                string genLayout = GenerateLayout(type, xpos, ypos);
                SeatDTO seat = new()
                {
                    Layout = genLayout,
                    State = 0,
                    OfficeId = newOffice.OfficeId
                };
                await client.PostAsJsonAsync("/api/seats", seat);

                xpos += elementSize + 5;
                if(xpos + elementSize > layoutWidth) {
                    xpos = 0;
                    ypos += elementSize + 5;
                }
            }

            loading = false;
        }
    }

    // Seat layout
    private String GenerateLayout(int type, int xpos, int ypos)
    {
        if (type == 0)
            return "<div # class='seat' style='display: inline-block; width: " + elementSize + "px; height: " + elementSize + "px; margin: 5px; border: 1px solid black; position: absolute; top: " + ypos + "px; left: " + xpos + "px; pointer-events: auto;'></div>";
        else
            return "<rect # class='seat' width='" + elementSize + "' height='" + elementSize + "' x='" + xpos + "' y='" + ypos + "' style='pointer-events: auto;'/>";
    }
}

@if(loading)
{
    <LoadingSymbol></LoadingSymbol>
} else {
    <div>
        <h3>Data Generation</h3>
        <button class="btn" @onclick="StartGeneration">Start Generation</button>
    </div>
}
