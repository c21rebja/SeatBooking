@using SeatBookingAPI.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navMan
@rendermode InteractiveServer

@code {
    HttpClient client = new HttpClient();
    Office selectedOffice = new Office();
    private Seat newSeat = new Seat();
    private IEnumerable<Office> offices = Array.Empty<Office>();
    private string LayoutContent = "";

    protected override async Task OnInitializedAsync()
    {
        client = ClientFactory.CreateClient("API");
        await GetOffices();
    }

    // Get all offices
    private async Task GetOffices()
    {
        offices = await client.GetFromJsonAsync<IEnumerable<Office>>("/api/offices") ?? Enumerable.Empty<Office>(); ;
    }

    private async Task SelectOffice(long officeId)
    {
        Office office = await client.GetFromJsonAsync<Office>("/api/offices/" + officeId);
        if(office != null)
        {
            selectedOffice = office;
            SetupLayout();
        }
    }

    // Combines the seats and the office layout to display
    private void SetupLayout()
    {
        if(selectedOffice.Layout != null)
        {
            string allSeats = "";
            foreach (Seat seat in selectedOffice.Seats)
            {
                if (seat.Layout != null)
                {
                    allSeats += seat.Layout;
                }
            }
            LayoutContent = selectedOffice.Layout.Replace("#", allSeats);
        }
    }

    /* Office settings */
    // Update an office when submitting the form
    private async Task UpdateOffice()
    {
        OfficeDTO office = new()
        {
            Name = selectedOffice.Name,
            Layout = selectedOffice.Layout
        };
        await client.PutAsJsonAsync("/api/offices/" + selectedOffice.OfficeId, office);
        await Refresh(true);
    }

    private async Task CreateOffice()
    {
        OfficeDTO office = new()
            {
                Name = selectedOffice.Name,
                Layout = selectedOffice.Layout
            };
        await client.PostAsJsonAsync("/api/offices", office);
        selectedOffice = new Office();
        await Refresh(false);
    }

    private async Task DeleteOffice()
    {
        await client.DeleteAsync("/api/offices/" + selectedOffice.OfficeId);
        selectedOffice = new Office();
        await Refresh(false);
    }

    /* Seat settings */
    private async Task UpdateSeat(Seat seat)
    {
        SeatDTO seatDTO = new()
            {
                Layout = seat.Layout,
                State = seat.State,
                UserId = seat.UserId
            };
        await client.PutAsJsonAsync("/api/seats/" + seat.SeatId, seat);
        await Refresh(true);
    }

    private async Task CreateSeat()
    {
        SeatDTO seat = new()
            {
                Layout = newSeat.Layout,
                State = 0,
                OfficeId = selectedOffice.OfficeId
            };
        await client.PostAsJsonAsync("/api/seats", seat);
        newSeat = new Seat();
        await Refresh(true);
    }

    private async Task DeleteSeat(long seatId)
    {
        await client.DeleteAsync("/api/seats/" + seatId);
        await Refresh(true);
    }

    /* Refresh after updating */
    private async Task Refresh(bool saveCurrentSelection)
    {
        long officeId = selectedOffice.OfficeId;
        await GetOffices();
        if(saveCurrentSelection) await SelectOffice(officeId);
    }
}
<div class="container-content">
    <section class="list-menu">
        <!-- Menu to select office -->
        <button class="listitem" tabindex="0" @onclick="() => selectedOffice = new Office()">Create new office</button>
        @foreach (Office office in offices)
        {
            <button class="listitem" tabindex="0" @onclick="() => SelectOffice(office.OfficeId)">@office.Name</button>
        }
    </section>

    <section>
        <!-- If no office is selected -->
        @if (selectedOffice.OfficeId == 0)
        {
            <EditForm Model="@selectedOffice" OnSubmit="@CreateOffice" FormName="newOfficeForm">
                <label>Name<InputText @bind-Value=@selectedOffice.Name /></label>
                <label>Layout<InputTextArea @bind-Value=@selectedOffice.Layout /></label>
                <input class="btn" type="submit" value="Create" />
            </EditForm>
        }

        <!-- If an office is selected -->
        @if (selectedOffice.OfficeId != 0)
        {
            <!-- Edit office form -->
            <EditForm Model=@selectedOffice OnSubmit="@UpdateOffice" FormName="officeForm">
                <label>Name<InputText @bind-Value=@selectedOffice.Name /></label>
                <label>Layout<InputTextArea @bind-Value=@selectedOffice.Layout /></label>
                <input class="btn" type="submit" value="Save" />
                <input class="btn" type="button" value="Delete" @onclick=DeleteOffice />
            </EditForm>

            <div class="sectionbreak"></div>

            <!-- Edit seats form -->
            @foreach (Seat seat in selectedOffice.Seats)
            {
                <EditForm Model=@seat OnSubmit="() => UpdateSeat(seat)">
                    <label>Layout - Seat @seat.SeatId<InputTextArea @bind-Value=@seat.Layout /></label>
                    <input class="btn" type="submit" value="Save" />
                    <input class="btn" type="button" value="Delete" @onclick="() => DeleteSeat(seat.SeatId)" />
                </EditForm>
            }

            <div class="sectionbreak"></div>

            <EditForm Model=@newSeat OnSubmit="@CreateSeat">
                <label>Add New Seat Layout<InputTextArea @bind-Value=@newSeat.Layout /></label>
                <input class="btn" type="submit" value="Add" />
            </EditForm>

        }
    </section>
</div>
@if(selectedOffice.OfficeId != 0)
{
    <div class="preview-box">
        <!-- Box to display the selected office's layout -->
        <h2 class="heading">Preview</h2>
        @if (selectedOffice.Layout != null)
        {
            <div>@((MarkupString)LayoutContent)</div>
        }
    </div>
}

