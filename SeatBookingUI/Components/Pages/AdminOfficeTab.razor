@using SeatBookingAPI.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer

@code {
    HttpClient client = new HttpClient();
    Office selectedOffice = new Office();
    private Seat newSeat = new Seat();
    private IEnumerable<Office> offices = Array.Empty<Office>();
    private string LayoutContent = "";

    protected override async Task OnInitializedAsync()
    {
        client = ClientFactory.CreateClient("API");
        await GetOffices();
    }

    // Get all offices
    private async Task GetOffices()
    {
        offices = await client.GetFromJsonAsync<IEnumerable<Office>>("/api/offices") ?? Enumerable.Empty<Office>(); ;
    }

    private async Task SelectOffice(long officeId)
    {
        Office office = await client.GetFromJsonAsync<Office>("/api/offices/" + officeId);
        if(office != null)
        {
            selectedOffice = office;
            SetupLayout();
        }
    }

    // Combines the seats and the office layout to display
    private void SetupLayout()
    {
        string allSeats = "";
        foreach (Seat seat in selectedOffice.Seats)
        {
            if (seat.Layout != null)
            {
                allSeats += seat.Layout;
            }
        }
        LayoutContent = selectedOffice.Layout.Replace("#", allSeats);
    }

    /* Office settings */
    // Update an office when submitting the form
    private async Task UpdateOffice()
    {
        OfficeDTO office = new()
        {
            Name = selectedOffice.Name,
            Layout = selectedOffice.Layout
        };
        await client.PutAsJsonAsync("/api/offices/" + selectedOffice.OfficeId, office);
    }

    private async Task CreateOffice()
    {
        OfficeDTO office = new()
            {
                Name = selectedOffice.Name,
                Layout = selectedOffice.Layout
            };
        await client.PostAsJsonAsync("/api/offices", office);
        selectedOffice = new Office();
        await GetOffices();
    }

    private async Task DeleteOffice()
    {
        await client.DeleteAsync("/api/offices/" + selectedOffice.OfficeId);
        selectedOffice = new Office();
        await GetOffices();
    }

    /* Seat settings */
    private async Task UpdateSeat(Seat seat)
    {
        SeatDTO seatDTO = new()
            {
                Layout = seat.Layout,
                State = seat.State,
                UserId = seat.UserId
            };
        await client.PutAsJsonAsync("/api/seats/" + seat.SeatId, seat);
    }

    private async Task CreateSeat()
    {
        SeatDTO seat = new()
            {
                Layout = newSeat.Layout,
                State = 0,
                OfficeId = selectedOffice.OfficeId
            };
        await client.PostAsJsonAsync("/api/seats", seat);
        newSeat = new Seat();
        StateHasChanged();
    }

    private async Task DeleteSeat(long seatId)
    {
        await client.DeleteAsync("/api/seats/" + seatId);
        StateHasChanged();
    }
}

<!-- Menu to select office -->
<div @onclick="() => selectedOffice = new Office()">Create new office</div>
@foreach (Office office in offices)
{
    <div @onclick="() => SelectOffice(office.OfficeId)">@office.Name</div>
}

<!-- If no office is selected -->
@if (selectedOffice.OfficeId == 0)
{
    <EditForm Model="@selectedOffice" OnSubmit="@CreateOffice" FormName="newOfficeForm">
        <label>Name<InputText @bind-Value=@selectedOffice.Name /></label>
        <label>Layout<InputTextArea @bind-Value=@selectedOffice.Layout /></label>
        <input type="submit" value="Create" />
    </EditForm>
}

<!-- If an office is selected -->
@if (selectedOffice.OfficeId != 0)
{
    <!-- Edit office form -->
    <EditForm Model=@selectedOffice OnSubmit="@UpdateOffice" FormName="officeForm">
        <label>Name<InputText @bind-Value=@selectedOffice.Name /></label>
        <label>Layout<InputTextArea @bind-Value=@selectedOffice.Layout /></label>
        <input type="submit" value="Save" />
        <input type="button" value="Delete" @onclick=DeleteOffice />
    </EditForm>

    <!-- Edit seats form -->
    @foreach(Seat seat in selectedOffice.Seats)
    {
        <div>Seat @seat.SeatId</div>
        <EditForm Model=@seat OnSubmit="() => UpdateSeat(seat)">
            <label>Layout<InputTextArea @bind-Value=@seat.Layout /></label>
            <input type="submit" value="Save" />
            <input type="button" value="Delete" @onclick="() => DeleteSeat(seat.SeatId)"/>
        </EditForm>
    }
    <div>New Seat</div>
    <EditForm Model=@newSeat OnSubmit="@CreateSeat">
        <label>Layout<InputTextArea @bind-Value=@newSeat.Layout /></label>
        <input type="submit" value="Create" />
    </EditForm>

    <!-- Box to display the selected office's layout -->
    @if (selectedOffice.Layout != null)
    {
        <div>@((MarkupString)LayoutContent)</div>
    }
}